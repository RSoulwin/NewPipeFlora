// Generated by view binder compiler. Do not edit!
package org.schabi.newpipelegacy.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.CheckBox;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.ScrollView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatSeekBar;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.schabi.newpipelegacy.R;
import org.schabi.newpipelegacy.views.NewPipeTextView;

public final class DialogPlaybackParameterBinding implements ViewBinding {
  @NonNull
  private final ScrollView rootView;

  @NonNull
  public final LinearLayout additionalOptions;

  @NonNull
  public final RelativeLayout pitchControlContainer;

  @NonNull
  public final NewPipeTextView pitchControlModePercent;

  @NonNull
  public final NewPipeTextView pitchControlModeSemitone;

  @NonNull
  public final LinearLayout pitchControlModeTabs;

  @NonNull
  public final NewPipeTextView pitchControlText;

  @NonNull
  public final RelativeLayout pitchPercentControl;

  @NonNull
  public final NewPipeTextView pitchPercentCurrentText;

  @NonNull
  public final RelativeLayout pitchPercentDisplay;

  @NonNull
  public final NewPipeTextView pitchPercentMaximumText;

  @NonNull
  public final NewPipeTextView pitchPercentMinimumText;

  @NonNull
  public final AppCompatSeekBar pitchPercentSeekbar;

  @NonNull
  public final NewPipeTextView pitchPercentStepDown;

  @NonNull
  public final NewPipeTextView pitchPercentStepUp;

  @NonNull
  public final RelativeLayout pitchSemitoneControl;

  @NonNull
  public final NewPipeTextView pitchSemitoneCurrentText;

  @NonNull
  public final RelativeLayout pitchSemitoneDisplay;

  @NonNull
  public final NewPipeTextView pitchSemitoneMaximumText;

  @NonNull
  public final NewPipeTextView pitchSemitoneMinimumText;

  @NonNull
  public final AppCompatSeekBar pitchSemitoneSeekbar;

  @NonNull
  public final NewPipeTextView pitchSemitoneStepDown;

  @NonNull
  public final NewPipeTextView pitchSemitoneStepUp;

  @NonNull
  public final ImageView pitchToogleControlModes;

  @NonNull
  public final NewPipeTextView playbackStepType;

  @NonNull
  public final View separatorCheckbox;

  @NonNull
  public final View separatorPitch;

  @NonNull
  public final View separatorStepSizeSelector;

  @NonNull
  public final CheckBox skipSilenceCheckbox;

  @NonNull
  public final NewPipeTextView stepSizeFivePercent;

  @NonNull
  public final NewPipeTextView stepSizeOneHundredPercent;

  @NonNull
  public final NewPipeTextView stepSizeOnePercent;

  @NonNull
  public final LinearLayout stepSizeSelector;

  @NonNull
  public final NewPipeTextView stepSizeTenPercent;

  @NonNull
  public final NewPipeTextView stepSizeTwentyFivePercent;

  @NonNull
  public final RelativeLayout tempoControl;

  @NonNull
  public final NewPipeTextView tempoControlText;

  @NonNull
  public final NewPipeTextView tempoCurrentText;

  @NonNull
  public final NewPipeTextView tempoMaximumText;

  @NonNull
  public final NewPipeTextView tempoMinimumText;

  @NonNull
  public final AppCompatSeekBar tempoSeekbar;

  @NonNull
  public final NewPipeTextView tempoStepDown;

  @NonNull
  public final NewPipeTextView tempoStepUp;

  @NonNull
  public final CheckBox unhookCheckbox;

  private DialogPlaybackParameterBinding(@NonNull ScrollView rootView,
      @NonNull LinearLayout additionalOptions, @NonNull RelativeLayout pitchControlContainer,
      @NonNull NewPipeTextView pitchControlModePercent,
      @NonNull NewPipeTextView pitchControlModeSemitone, @NonNull LinearLayout pitchControlModeTabs,
      @NonNull NewPipeTextView pitchControlText, @NonNull RelativeLayout pitchPercentControl,
      @NonNull NewPipeTextView pitchPercentCurrentText, @NonNull RelativeLayout pitchPercentDisplay,
      @NonNull NewPipeTextView pitchPercentMaximumText,
      @NonNull NewPipeTextView pitchPercentMinimumText,
      @NonNull AppCompatSeekBar pitchPercentSeekbar, @NonNull NewPipeTextView pitchPercentStepDown,
      @NonNull NewPipeTextView pitchPercentStepUp, @NonNull RelativeLayout pitchSemitoneControl,
      @NonNull NewPipeTextView pitchSemitoneCurrentText,
      @NonNull RelativeLayout pitchSemitoneDisplay,
      @NonNull NewPipeTextView pitchSemitoneMaximumText,
      @NonNull NewPipeTextView pitchSemitoneMinimumText,
      @NonNull AppCompatSeekBar pitchSemitoneSeekbar,
      @NonNull NewPipeTextView pitchSemitoneStepDown, @NonNull NewPipeTextView pitchSemitoneStepUp,
      @NonNull ImageView pitchToogleControlModes, @NonNull NewPipeTextView playbackStepType,
      @NonNull View separatorCheckbox, @NonNull View separatorPitch,
      @NonNull View separatorStepSizeSelector, @NonNull CheckBox skipSilenceCheckbox,
      @NonNull NewPipeTextView stepSizeFivePercent,
      @NonNull NewPipeTextView stepSizeOneHundredPercent,
      @NonNull NewPipeTextView stepSizeOnePercent, @NonNull LinearLayout stepSizeSelector,
      @NonNull NewPipeTextView stepSizeTenPercent,
      @NonNull NewPipeTextView stepSizeTwentyFivePercent, @NonNull RelativeLayout tempoControl,
      @NonNull NewPipeTextView tempoControlText, @NonNull NewPipeTextView tempoCurrentText,
      @NonNull NewPipeTextView tempoMaximumText, @NonNull NewPipeTextView tempoMinimumText,
      @NonNull AppCompatSeekBar tempoSeekbar, @NonNull NewPipeTextView tempoStepDown,
      @NonNull NewPipeTextView tempoStepUp, @NonNull CheckBox unhookCheckbox) {
    this.rootView = rootView;
    this.additionalOptions = additionalOptions;
    this.pitchControlContainer = pitchControlContainer;
    this.pitchControlModePercent = pitchControlModePercent;
    this.pitchControlModeSemitone = pitchControlModeSemitone;
    this.pitchControlModeTabs = pitchControlModeTabs;
    this.pitchControlText = pitchControlText;
    this.pitchPercentControl = pitchPercentControl;
    this.pitchPercentCurrentText = pitchPercentCurrentText;
    this.pitchPercentDisplay = pitchPercentDisplay;
    this.pitchPercentMaximumText = pitchPercentMaximumText;
    this.pitchPercentMinimumText = pitchPercentMinimumText;
    this.pitchPercentSeekbar = pitchPercentSeekbar;
    this.pitchPercentStepDown = pitchPercentStepDown;
    this.pitchPercentStepUp = pitchPercentStepUp;
    this.pitchSemitoneControl = pitchSemitoneControl;
    this.pitchSemitoneCurrentText = pitchSemitoneCurrentText;
    this.pitchSemitoneDisplay = pitchSemitoneDisplay;
    this.pitchSemitoneMaximumText = pitchSemitoneMaximumText;
    this.pitchSemitoneMinimumText = pitchSemitoneMinimumText;
    this.pitchSemitoneSeekbar = pitchSemitoneSeekbar;
    this.pitchSemitoneStepDown = pitchSemitoneStepDown;
    this.pitchSemitoneStepUp = pitchSemitoneStepUp;
    this.pitchToogleControlModes = pitchToogleControlModes;
    this.playbackStepType = playbackStepType;
    this.separatorCheckbox = separatorCheckbox;
    this.separatorPitch = separatorPitch;
    this.separatorStepSizeSelector = separatorStepSizeSelector;
    this.skipSilenceCheckbox = skipSilenceCheckbox;
    this.stepSizeFivePercent = stepSizeFivePercent;
    this.stepSizeOneHundredPercent = stepSizeOneHundredPercent;
    this.stepSizeOnePercent = stepSizeOnePercent;
    this.stepSizeSelector = stepSizeSelector;
    this.stepSizeTenPercent = stepSizeTenPercent;
    this.stepSizeTwentyFivePercent = stepSizeTwentyFivePercent;
    this.tempoControl = tempoControl;
    this.tempoControlText = tempoControlText;
    this.tempoCurrentText = tempoCurrentText;
    this.tempoMaximumText = tempoMaximumText;
    this.tempoMinimumText = tempoMinimumText;
    this.tempoSeekbar = tempoSeekbar;
    this.tempoStepDown = tempoStepDown;
    this.tempoStepUp = tempoStepUp;
    this.unhookCheckbox = unhookCheckbox;
  }

  @Override
  @NonNull
  public ScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static DialogPlaybackParameterBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DialogPlaybackParameterBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.dialog_playback_parameter, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DialogPlaybackParameterBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.additionalOptions;
      LinearLayout additionalOptions = ViewBindings.findChildViewById(rootView, id);
      if (additionalOptions == null) {
        break missingId;
      }

      id = R.id.pitchControlContainer;
      RelativeLayout pitchControlContainer = ViewBindings.findChildViewById(rootView, id);
      if (pitchControlContainer == null) {
        break missingId;
      }

      id = R.id.pitchControlModePercent;
      NewPipeTextView pitchControlModePercent = ViewBindings.findChildViewById(rootView, id);
      if (pitchControlModePercent == null) {
        break missingId;
      }

      id = R.id.pitchControlModeSemitone;
      NewPipeTextView pitchControlModeSemitone = ViewBindings.findChildViewById(rootView, id);
      if (pitchControlModeSemitone == null) {
        break missingId;
      }

      id = R.id.pitchControlModeTabs;
      LinearLayout pitchControlModeTabs = ViewBindings.findChildViewById(rootView, id);
      if (pitchControlModeTabs == null) {
        break missingId;
      }

      id = R.id.pitchControlText;
      NewPipeTextView pitchControlText = ViewBindings.findChildViewById(rootView, id);
      if (pitchControlText == null) {
        break missingId;
      }

      id = R.id.pitchPercentControl;
      RelativeLayout pitchPercentControl = ViewBindings.findChildViewById(rootView, id);
      if (pitchPercentControl == null) {
        break missingId;
      }

      id = R.id.pitchPercentCurrentText;
      NewPipeTextView pitchPercentCurrentText = ViewBindings.findChildViewById(rootView, id);
      if (pitchPercentCurrentText == null) {
        break missingId;
      }

      id = R.id.pitchPercentDisplay;
      RelativeLayout pitchPercentDisplay = ViewBindings.findChildViewById(rootView, id);
      if (pitchPercentDisplay == null) {
        break missingId;
      }

      id = R.id.pitchPercentMaximumText;
      NewPipeTextView pitchPercentMaximumText = ViewBindings.findChildViewById(rootView, id);
      if (pitchPercentMaximumText == null) {
        break missingId;
      }

      id = R.id.pitchPercentMinimumText;
      NewPipeTextView pitchPercentMinimumText = ViewBindings.findChildViewById(rootView, id);
      if (pitchPercentMinimumText == null) {
        break missingId;
      }

      id = R.id.pitchPercentSeekbar;
      AppCompatSeekBar pitchPercentSeekbar = ViewBindings.findChildViewById(rootView, id);
      if (pitchPercentSeekbar == null) {
        break missingId;
      }

      id = R.id.pitchPercentStepDown;
      NewPipeTextView pitchPercentStepDown = ViewBindings.findChildViewById(rootView, id);
      if (pitchPercentStepDown == null) {
        break missingId;
      }

      id = R.id.pitchPercentStepUp;
      NewPipeTextView pitchPercentStepUp = ViewBindings.findChildViewById(rootView, id);
      if (pitchPercentStepUp == null) {
        break missingId;
      }

      id = R.id.pitchSemitoneControl;
      RelativeLayout pitchSemitoneControl = ViewBindings.findChildViewById(rootView, id);
      if (pitchSemitoneControl == null) {
        break missingId;
      }

      id = R.id.pitchSemitoneCurrentText;
      NewPipeTextView pitchSemitoneCurrentText = ViewBindings.findChildViewById(rootView, id);
      if (pitchSemitoneCurrentText == null) {
        break missingId;
      }

      id = R.id.pitchSemitoneDisplay;
      RelativeLayout pitchSemitoneDisplay = ViewBindings.findChildViewById(rootView, id);
      if (pitchSemitoneDisplay == null) {
        break missingId;
      }

      id = R.id.pitchSemitoneMaximumText;
      NewPipeTextView pitchSemitoneMaximumText = ViewBindings.findChildViewById(rootView, id);
      if (pitchSemitoneMaximumText == null) {
        break missingId;
      }

      id = R.id.pitchSemitoneMinimumText;
      NewPipeTextView pitchSemitoneMinimumText = ViewBindings.findChildViewById(rootView, id);
      if (pitchSemitoneMinimumText == null) {
        break missingId;
      }

      id = R.id.pitchSemitoneSeekbar;
      AppCompatSeekBar pitchSemitoneSeekbar = ViewBindings.findChildViewById(rootView, id);
      if (pitchSemitoneSeekbar == null) {
        break missingId;
      }

      id = R.id.pitchSemitoneStepDown;
      NewPipeTextView pitchSemitoneStepDown = ViewBindings.findChildViewById(rootView, id);
      if (pitchSemitoneStepDown == null) {
        break missingId;
      }

      id = R.id.pitchSemitoneStepUp;
      NewPipeTextView pitchSemitoneStepUp = ViewBindings.findChildViewById(rootView, id);
      if (pitchSemitoneStepUp == null) {
        break missingId;
      }

      id = R.id.pitchToogleControlModes;
      ImageView pitchToogleControlModes = ViewBindings.findChildViewById(rootView, id);
      if (pitchToogleControlModes == null) {
        break missingId;
      }

      id = R.id.playback_step_type;
      NewPipeTextView playbackStepType = ViewBindings.findChildViewById(rootView, id);
      if (playbackStepType == null) {
        break missingId;
      }

      id = R.id.separatorCheckbox;
      View separatorCheckbox = ViewBindings.findChildViewById(rootView, id);
      if (separatorCheckbox == null) {
        break missingId;
      }

      id = R.id.separatorPitch;
      View separatorPitch = ViewBindings.findChildViewById(rootView, id);
      if (separatorPitch == null) {
        break missingId;
      }

      id = R.id.separatorStepSizeSelector;
      View separatorStepSizeSelector = ViewBindings.findChildViewById(rootView, id);
      if (separatorStepSizeSelector == null) {
        break missingId;
      }

      id = R.id.skipSilenceCheckbox;
      CheckBox skipSilenceCheckbox = ViewBindings.findChildViewById(rootView, id);
      if (skipSilenceCheckbox == null) {
        break missingId;
      }

      id = R.id.stepSizeFivePercent;
      NewPipeTextView stepSizeFivePercent = ViewBindings.findChildViewById(rootView, id);
      if (stepSizeFivePercent == null) {
        break missingId;
      }

      id = R.id.stepSizeOneHundredPercent;
      NewPipeTextView stepSizeOneHundredPercent = ViewBindings.findChildViewById(rootView, id);
      if (stepSizeOneHundredPercent == null) {
        break missingId;
      }

      id = R.id.stepSizeOnePercent;
      NewPipeTextView stepSizeOnePercent = ViewBindings.findChildViewById(rootView, id);
      if (stepSizeOnePercent == null) {
        break missingId;
      }

      id = R.id.stepSizeSelector;
      LinearLayout stepSizeSelector = ViewBindings.findChildViewById(rootView, id);
      if (stepSizeSelector == null) {
        break missingId;
      }

      id = R.id.stepSizeTenPercent;
      NewPipeTextView stepSizeTenPercent = ViewBindings.findChildViewById(rootView, id);
      if (stepSizeTenPercent == null) {
        break missingId;
      }

      id = R.id.stepSizeTwentyFivePercent;
      NewPipeTextView stepSizeTwentyFivePercent = ViewBindings.findChildViewById(rootView, id);
      if (stepSizeTwentyFivePercent == null) {
        break missingId;
      }

      id = R.id.tempoControl;
      RelativeLayout tempoControl = ViewBindings.findChildViewById(rootView, id);
      if (tempoControl == null) {
        break missingId;
      }

      id = R.id.tempoControlText;
      NewPipeTextView tempoControlText = ViewBindings.findChildViewById(rootView, id);
      if (tempoControlText == null) {
        break missingId;
      }

      id = R.id.tempoCurrentText;
      NewPipeTextView tempoCurrentText = ViewBindings.findChildViewById(rootView, id);
      if (tempoCurrentText == null) {
        break missingId;
      }

      id = R.id.tempoMaximumText;
      NewPipeTextView tempoMaximumText = ViewBindings.findChildViewById(rootView, id);
      if (tempoMaximumText == null) {
        break missingId;
      }

      id = R.id.tempoMinimumText;
      NewPipeTextView tempoMinimumText = ViewBindings.findChildViewById(rootView, id);
      if (tempoMinimumText == null) {
        break missingId;
      }

      id = R.id.tempoSeekbar;
      AppCompatSeekBar tempoSeekbar = ViewBindings.findChildViewById(rootView, id);
      if (tempoSeekbar == null) {
        break missingId;
      }

      id = R.id.tempoStepDown;
      NewPipeTextView tempoStepDown = ViewBindings.findChildViewById(rootView, id);
      if (tempoStepDown == null) {
        break missingId;
      }

      id = R.id.tempoStepUp;
      NewPipeTextView tempoStepUp = ViewBindings.findChildViewById(rootView, id);
      if (tempoStepUp == null) {
        break missingId;
      }

      id = R.id.unhookCheckbox;
      CheckBox unhookCheckbox = ViewBindings.findChildViewById(rootView, id);
      if (unhookCheckbox == null) {
        break missingId;
      }

      return new DialogPlaybackParameterBinding((ScrollView) rootView, additionalOptions,
          pitchControlContainer, pitchControlModePercent, pitchControlModeSemitone,
          pitchControlModeTabs, pitchControlText, pitchPercentControl, pitchPercentCurrentText,
          pitchPercentDisplay, pitchPercentMaximumText, pitchPercentMinimumText,
          pitchPercentSeekbar, pitchPercentStepDown, pitchPercentStepUp, pitchSemitoneControl,
          pitchSemitoneCurrentText, pitchSemitoneDisplay, pitchSemitoneMaximumText,
          pitchSemitoneMinimumText, pitchSemitoneSeekbar, pitchSemitoneStepDown,
          pitchSemitoneStepUp, pitchToogleControlModes, playbackStepType, separatorCheckbox,
          separatorPitch, separatorStepSizeSelector, skipSilenceCheckbox, stepSizeFivePercent,
          stepSizeOneHundredPercent, stepSizeOnePercent, stepSizeSelector, stepSizeTenPercent,
          stepSizeTwentyFivePercent, tempoControl, tempoControlText, tempoCurrentText,
          tempoMaximumText, tempoMinimumText, tempoSeekbar, tempoStepDown, tempoStepUp,
          unhookCheckbox);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
